@page "/Cliente/Login"

@using OverwatchBlazor.Client.Services.interfaces
@using OverwatchBlazor.Shared

@inject NavigationManager navigate
@inject IJSRuntime js
@inject IAuthService servicioAuth

<h3>Login</h3>


@*@model Cliente;*@



<div class="text-center">



    <div class="row">
        <div class="col">
            <h3><strong>Acceso a Overwatch2.com</strong></h3>
            <p>Para poder disfrutar de algunos de nuestros servicios, debes estar registrado. Registrarse en Overwatch2.com es rápido, fácil y GRATIS!</p>
        </div>
    </div>

    <div class="row">



        <div class="col">

            <div class="col">
                <p><h3>Identificate...</h3></p><br />
                <small>Si no te loggeas no podrás comprar, si no puedes comprar no podrás ser feliz :(</small>
            </div>


            @* //Pinta los errores, si los hay *@
            @*@if (ViewData["error"] != null && !string.IsNullOrEmpty(ViewData["error"].ToString()))
        {
            <div class="row">
                <div class="col">
                    <label class="alert-danger">@ViewData["error"]</label>
                </div>
            </div>
        }*@




            <EditForm Model="@credscliente" OnValidSubmit="LoginIn">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="form-group">
                    <label for="exampleInputEmail1">Correo electrónico *</label>
                    <InputText @bind-Value="@credscliente.Email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Direccion de email"></InputText>
                    <ValidationMessage For="@(()=> credscliente.Email)"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label for="exampleInputPassword1">Contraseña *</label>
                    <input type="password" @bind-value="@credscliente.Password" class="form-control" id="exampleInputPassword1" placeholder="Mínimo 6 caracteres">
                    <ValidationMessage For="@(()=>credscliente.Password)"></ValidationMessage>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <button type="button" class="btn btn-link" @onclick="@(()=> navigate.NavigateTo("/Cliente/Registro"))">
                            ¿¿no tienes cuenta?? REGISTRATE
                        </button>
                    </div>
                    <div class="form-group col-md-6">
                        <button type="submit" class="btn-lg btn-dark">ACCEDER</button>
                    </div>
                </div>

            </EditForm>


            @*<div class="row">
            <form id="formlogin2" method="get" asp-controller="Home" asp-action="Pagina2">
                <input type="submit" value="Ir a página 2"/>
            </form>

        </div>*@
        </div>

    </div>


</div>


@code {
    Credenciales credscliente = new Credenciales();
    List<String> erroresLogin = new List<string>();

    protected async Task LoginIn()
    {
        await js.InvokeVoidAsync("console.log", this.credscliente);

        RESTMessage _resp = await this.servicioAuth.Login(this.credscliente);

        if (_resp.Errores == null)
        {
            this.navigate.NavigateTo("/Cliente/Panel/Inicio");
        }
        else
        {
            this.erroresLogin = _resp.Errores;
        }

    }
}
